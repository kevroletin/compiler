* DONE заменить bool Token.IsConst() на bool Token.IsParam()* DONE заменить название bool Token.IsTermOper() и Parser::GetTermOper() на что ни-будь более подходящее* DONE заменить последовательность вызовов Get-"-Oper на вызов одной функции с передачей функции сравнения (в начале parser.cpp имеются заготовки на этот счёт)* DONE привести в порядок сесты* DONE переименовать syn_table_stack на sym_table_stack* DONE переименовать файлы syn_table.* на sym_table.** DONE sym_var_param используется вместо sym_var_const. Исправить* DONE в разборе процедуры по честному разобрать объявления (все объявления переменных и объявления типов)* DONE сдалать проверку соответствия типов передаваемых параметров формальным параметрам функции* DONE разобраться с мелкими функциями вроде PrintSpaces, которые разбросаны где попало* DONE переименовать Parser::ParseVarDefinitions на -"-Declarations* DONE заменить последовательность PrintSpaces(..); o << " "; на одну конструкцию* DONE внести процедуры приведения типов в класс Parser* DONE разнести Parser::ParseType на мелкие процедуры* DONE вынести в Parser::ParseFunctionDefinition разбор параметров подопрограммы в отдельную процедуру* DONE в классе Parser вынести    GetRelationalExpr();   if (first == NULL) Error("expression expected");   if (cond->GetSymType() != top_type_int) Error("integer exppression expected");  //TryToConvertTypeOrDie(first, top_type_int, scan.GetToken());* DONE [#A] разнести Parser::GetTerm() на мелкие процедуры* DONE (сделал в точности наоборот) добавить проверки на валидность аргументов в конструкторы SyntaxNode-ов* DONE [#A] привести в порядок тесты* TODO [#A] Генерация кода* DONE [#C] Перенос тестирующих скриптов под Win* DONE протестировать str_hex_to_i в scanner.cpp или заменить на sscanf* DONE перенести добавление переменной Result в конструктор SymFunction* TODO убрать SymbCompLess из заголовочного файла sym_table.h* DONE исправить: арифмитические выражения, не присвоенные переменной портят стек* DONE получить label в SymVarGlobal::GenerateDeclaration* DONE вещественная арифметика* DONE поправить генерацию целочисленных констант* DONE генерация унарных операций* DONE генерация управляющих конструкций** TODO разбор break, continue* DONE генерация функций* TODO сделать стандартные типы top_type_* константными* DONE GetValue для строковых констант возвращает LValue() 4* DONE поправить отступы в сгенерированном коде* DONE Вынести повторяющийся код SymVar*::GenerateValue* TODO Написать деструкторы для StmtAssign  и NodeVar* TODO в генераторе после команд без суффикса агрументы типа Immidiate печатается без '$' для того, чтобы можно было писать после команд перехода метки. Подумать, и сделать по-человечески* DONE [#A] При использовании отрицательных целочисленных констант всё падает* DONE добавить forward* DONE доабавить break, continue, exit* DONE выполнить проверку типов аргументов для операций AND OR NOT * DONE генерация унарнх операций* DONE Бинарный опепация действует на любые переменные одинакового типа* TODO сороудить ClassFactory для разборе параметров функций и объявления переменный3* DONE вынести контанты в файле generator.h в отдельный файл* DONE разобрать пустой оператор ';'* DONE последние ';' в конце блока можно опустить* TODO выдать ошибку, если тело функции не объявлено* TODO разнести ParseFunctionDefinition на более мелкие подпрограммы* TODO Высокоуровневая оптимизация** TODO Инлайн функции** TODO В процедурах при выявлении side-effect-а проверить, параметры переданные по ссылки изменяются в теле или нет** TODO Вынос выражений из тела цикла** TODO Свёртка константных выражений** TODO В цикле For можно вынести некоторые выражиния между вычислением init_val, last_val и телом цикла* TODO int NodeBinaryOp::ComputeIntConstExpr() const - Разнести на более мелкие процедуры